import { Component, Input } from '@angular/core';
import { AbstractControl, FormControl } from '@angular/forms';
import { GoFormService } from '../../services/form.service';

@Component({
  template: '',
})
export class GoFormBaseComponent {
  /**
   * Unique identifier for the form element
   */
  _id: string;

  /**
   * FormControl or Abstract Control for the component
   */
  @Input() control: FormControl | AbstractControl;

  /**
   * Array of hints to display beneath form element, *not errors*
   */
  @Input() hints: string[];

  /**
   * Key used for further uniqueness. Useful for large dynamic forms
   */
  @Input() key: string;

  /**
   * Label for the form element
   */
  @Input() label: string;

  /**
   * Placeholder text for the element
   */
  @Input() placeholder: string = '';

  /**
   * Theme for the component, defaults to 'light'
   */
  @Input() theme: 'light' | 'dark' = 'light';

  /**
   * Property to control the visibility of go-form-errors under form field.
   */
  @Input() hideFieldError: boolean;

  /**
   * Returns an object for ngClass generated by the GoFormService for inputs
   */
  get inputClasses(): { [k: string]: boolean } {
    return this.goFormService.baseInputClasses(this.control, this.theme);
  }

  /**
   * Returns an object for ngClass generated by the GoFormService for fieldsets
   */
  get fieldsetClasses(): { [k: string]: boolean } {
    return this.goFormService.baseFieldsetClasses(this.control, this.theme);
  }

  constructor(private goFormService: GoFormService) {
    this.generateId();
  }

  /**
   * Generates a unique id for the form element
   */
  private generateId(): void {
    this._id = this.key || this.goFormService.generateId(this.label, 'input');
  }
}
